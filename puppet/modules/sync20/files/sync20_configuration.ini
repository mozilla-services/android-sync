[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5000

# The top-level application stitches together the tokenserver and syncstorage
# apps to run in a single server's namespace.
[composite:main]
use = egg:Paste#urlmap
/ = tokenserver
/service/sync = syncstorage

[app:tokenserver]
use = egg:tokenserver

[app:syncstorage]
use = egg:SyncStorage

# Configure the tokenserver and related libraries.
[tokenserver]
backend = tokenserver.assignment.fixednode.DefaultNodeAssignmentBackend
applications = sync-2.0
# A file mapping hostnames to secret keys, used to generate token-signing
# secrets.  You should definitely edit this file to add a new secret!
secrets_file = /etc/mozilla-services/sync20_secrets
# You need to specify the client-visible URL of your server as "service_entry",
# so that it can be passed back to the client during authentication.
service_entry = http://localhost:5000

[endpoints]
sync-2.0 = {node}/service/sync/2.0/{uid}

[browserid]
# Configure how BrowserID assertions are verified.
# You should set "audiences" to match the client-visible
# hostname of your server
backend = tokenserver.verifiers.LocalVerifier
audiences = http://localhost:5000

[storage]
# Database settings for the syncstorage service.
# Provide an SQLAlchemy-style database URL in "sqluri" to specify
# how to connect to the database.
backend = syncstorage.storage.sql.SQLStorage
sqluri = sqlite:////tmp/tests.db
standard_collections = false
use_quota = true
quota_size = 5242880
pool_size = 100
pool_recycle = 3600
reset_on_return = true
create_tables = true
batch_size = 25

[macauth]
# Point the syncstorage server to the same secrets file as used by the
# tokenserver.  Eventually we might merge these two settings...
secrets_file = /etc/mozilla-services/sync20_secrets

[metlog]
backend = mozsvc.metrics.MetlogPlugin
enabled = True
sender_class = metlog.senders.StdOutSender

[cef]
use = true
file = syslog
vendor = mozilla
version = 0
device_version = 1.3
product = sagrada

# Local Variables:
# mode: conf-unix
# End:

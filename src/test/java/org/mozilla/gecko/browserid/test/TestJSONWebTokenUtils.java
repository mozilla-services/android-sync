/* Any copyright is dedicated to the Public Domain.
   http://creativecommons.org/publicdomain/zero/1.0/ */

package org.mozilla.gecko.browserid.test;

import java.math.BigInteger;
import java.security.GeneralSecurityException;

import org.junit.Assert;
import org.junit.Test;
import org.mozilla.gecko.browserid.DSACryptoImplementation;
import org.mozilla.gecko.browserid.JSONWebTokenUtils;
import org.mozilla.gecko.browserid.BrowserIDKeyPair;
import org.mozilla.gecko.browserid.SigningPrivateKey;
import org.mozilla.gecko.browserid.VerifyingPublicKey;
import org.mozilla.gecko.browserid.RSACryptoImplementation;
import org.mozilla.gecko.sync.ExtendedJSONObject;

public class TestJSONWebTokenUtils {
  public void doTestEncodeDecode(BrowserIDKeyPair keyPair) throws Exception {
    SigningPrivateKey privateKey = keyPair.getPrivate();
    VerifyingPublicKey publicKey = keyPair.getPublic();

    ExtendedJSONObject o = new ExtendedJSONObject();
    o.put("key", "value");

    String token = JSONWebTokenUtils.encode(o.toJSONString(), privateKey);
    Assert.assertNotNull(token);

    String payload = JSONWebTokenUtils.decode(token, publicKey);
    Assert.assertEquals(o.toJSONString(), payload);

    try {
      JSONWebTokenUtils.decode(token + "x", publicKey);
      Assert.fail("Expected exception.");
    } catch (GeneralSecurityException e) {
      // Do nothing.
    }
  }

  @Test
  public void testEncodeDecodeSuccessRSA() throws Exception {
    doTestEncodeDecode(RSACryptoImplementation.generateKeyPair(1024));
    doTestEncodeDecode(RSACryptoImplementation.generateKeyPair(2048));
  }

  @Test
  public void testEncodeDecodeSuccessDSA() throws Exception {
    doTestEncodeDecode(DSACryptoImplementation.generateKeyPair(512));
    doTestEncodeDecode(DSACryptoImplementation.generateKeyPair(1024));
  }

  public static String TEST_ASSERTION_ISSUER = "127.0.0.1";
  public static String TEST_AUDIENCE = "http://localhost:8080";

  @Test
  public void testRSAGeneration() throws Exception {
    // This test uses (now out-dated) MockMyID RSA data but doesn't rely on this
    // data actually being MockMyID's data.
    final BigInteger MOCKMYID_MODULUS          = new BigInteger("15498874758090276039465094105837231567265546373975960480941122651107772824121527483107402353899846252489837024870191707394743196399582959425513904762996756672089693541009892030848825079649783086005554442490232900875792851786203948088457942416978976455297428077460890650409549242124655536986141363719589882160081480785048965686285142002320767066674879737238012064156675899512503143225481933864507793118457805792064445502834162315532113963746801770187685650408560424682654937744713813773896962263709692724630650952159596951348264005004375017610441835956073275708740239518011400991972811669493356682993446554779893834303");
    final BigInteger MOCKMYID_PUBLIC_EXPONENT  = new BigInteger("65537");
    final BigInteger MOCKMYID_PRIVATE_EXPONENT = new BigInteger("6539906961872354450087244036236367269804254381890095841127085551577495913426869112377010004955160417265879626558436936025363204803913318582680951558904318308893730033158178650549970379367915856087364428530828396795995781364659413467784853435450762392157026962694408807947047846891301466649598749901605789115278274397848888140105306063608217776127549926721544215720872305194645129403056801987422794114703255989202755511523434098625000826968430077091984351410839837395828971692109391386427709263149504336916566097901771762648090880994773325283207496645630792248007805177873532441314470502254528486411726581424522838833");

    BigInteger n = new BigInteger("20332459213245328760269530796942625317006933400814022542511832260333163206808672913301254872114045771215470352093046136365629411384688395020388553744886954869033696089099714200452682590914843971683468562019706059388121176435204818734091361033445697933682779095713376909412972373727850278295874361806633955236862180792787906413536305117030045164276955491725646610368132167655556353974515423042221261732084368978523747789654468953860772774078384556028728800902433401131226904244661160767916883680495122225202542023841606998867411022088440946301191503335932960267228470933599974787151449279465703844493353175088719018221");
    BigInteger e = new BigInteger("65537");
    BigInteger d = new BigInteger("9362542596354998418106014928820888151984912891492829581578681873633736656469965533631464203894863562319612803232737938923691416707617473868582415657005943574434271946791143554652502483003923911339605326222297167404896789026986450703532494518628015811567189641735787240372075015553947628033216297520493759267733018808392882741098489889488442349031883643894014316243251108104684754879103107764521172490019661792943030921873284592436328217485953770574054344056638447333651425231219150676837203185544359148474983670261712939626697233692596362322419559401320065488125670905499610998631622562652935873085671353890279911361");

    long iat = 1352995809210L;
    long dur = 60 * 60 * 1000;
    long exp = iat + dur;

    VerifyingPublicKey mockMyIdPublicKey = RSACryptoImplementation.createPublicKey(MOCKMYID_MODULUS, MOCKMYID_PUBLIC_EXPONENT);;
    SigningPrivateKey mockMyIdPrivateKey = RSACryptoImplementation.createPrivateKey(MOCKMYID_MODULUS, MOCKMYID_PRIVATE_EXPONENT);
    VerifyingPublicKey publicKeyToSign = RSACryptoImplementation.createPublicKey(n, e);
    SigningPrivateKey privateKeyToSignWith = RSACryptoImplementation.createPrivateKey(n, d);

    String certificate = JSONWebTokenUtils.createCertificate(publicKeyToSign, "test@mockmyid.com", "mockmyid.com", iat, exp, mockMyIdPrivateKey);
    String assertion = JSONWebTokenUtils.createAssertion(privateKeyToSignWith, certificate, TEST_AUDIENCE, TEST_ASSERTION_ISSUER, iat, dur);
    String payload = JSONWebTokenUtils.decode(certificate, mockMyIdPublicKey);

    String EXPECTED_PAYLOAD = "{\"exp\":1352999409210,\"principal\":{\"email\":\"test@mockmyid.com\"},\"public-key\":{\"e\":\"65537\",\"n\":\"20332459213245328760269530796942625317006933400814022542511832260333163206808672913301254872114045771215470352093046136365629411384688395020388553744886954869033696089099714200452682590914843971683468562019706059388121176435204818734091361033445697933682779095713376909412972373727850278295874361806633955236862180792787906413536305117030045164276955491725646610368132167655556353974515423042221261732084368978523747789654468953860772774078384556028728800902433401131226904244661160767916883680495122225202542023841606998867411022088440946301191503335932960267228470933599974787151449279465703844493353175088719018221\",\"algorithm\":\"RS\"},\"iss\":\"mockmyid.com\",\"iat\":1352995809210}";
    Assert.assertEquals(EXPECTED_PAYLOAD, payload);

    // Really(!) brittle tests below:
    String EXPECTED_CERTIFICATE = "eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsInByaW5jaXBhbCI6eyJlbWFpbCI6InRlc3RAbW9ja215aWQuY29tIn0sInB1YmxpYy1rZXkiOnsiZSI6IjY1NTM3IiwibiI6IjIwMzMyNDU5MjEzMjQ1MzI4NzYwMjY5NTMwNzk2OTQyNjI1MzE3MDA2OTMzNDAwODE0MDIyNTQyNTExODMyMjYwMzMzMTYzMjA2ODA4NjcyOTEzMzAxMjU0ODcyMTE0MDQ1NzcxMjE1NDcwMzUyMDkzMDQ2MTM2MzY1NjI5NDExMzg0Njg4Mzk1MDIwMzg4NTUzNzQ0ODg2OTU0ODY5MDMzNjk2MDg5MDk5NzE0MjAwNDUyNjgyNTkwOTE0ODQzOTcxNjgzNDY4NTYyMDE5NzA2MDU5Mzg4MTIxMTc2NDM1MjA0ODE4NzM0MDkxMzYxMDMzNDQ1Njk3OTMzNjgyNzc5MDk1NzEzMzc2OTA5NDEyOTcyMzczNzI3ODUwMjc4Mjk1ODc0MzYxODA2NjMzOTU1MjM2ODYyMTgwNzkyNzg3OTA2NDEzNTM2MzA1MTE3MDMwMDQ1MTY0Mjc2OTU1NDkxNzI1NjQ2NjEwMzY4MTMyMTY3NjU1NTU2MzUzOTc0NTE1NDIzMDQyMjIxMjYxNzMyMDg0MzY4OTc4NTIzNzQ3Nzg5NjU0NDY4OTUzODYwNzcyNzc0MDc4Mzg0NTU2MDI4NzI4ODAwOTAyNDMzNDAxMTMxMjI2OTA0MjQ0NjYxMTYwNzY3OTE2ODgzNjgwNDk1MTIyMjI1MjAyNTQyMDIzODQxNjA2OTk4ODY3NDExMDIyMDg4NDQwOTQ2MzAxMTkxNTAzMzM1OTMyOTYwMjY3MjI4NDcwOTMzNTk5OTc0Nzg3MTUxNDQ5Mjc5NDY1NzAzODQ0NDkzMzUzMTc1MDg4NzE5MDE4MjIxIiwiYWxnb3JpdGhtIjoiUlMifSwiaXNzIjoibW9ja215aWQuY29tIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.FVLlQXJrTjvjAeCbANHk42_W_WqCgODkPD5q_hMfSoSCEMR0ZhdZdn_wnUkYnV9i4oMTKSla4TXYmIXGjvyI1tpaEi7bVcGghr0d2BQ-OonQOrDKVmpnUXYPCjJATGMtJjo-tyObR-p-J7E1ov8i2ZPPjeYZidcCOuWh_kjsMwkUTKVVlAyYjSUaTINylJ258DXso4KO0QRGU9-PP7C1KI_uCX9088ZelL4w3SR1XuOZvHsvWz1aUP9xZDAEQWY1cCyRrUXgGg0-bfzFy2M5DDHXpUuNJf9ST2kZIJl1_MuEU0CIwGe7qSZabbofnzprtiiXF1hTGQU4jB3za8CaeA";
    Assert.assertEquals(EXPECTED_CERTIFICATE, certificate);

    String EXPECTED_ASSERTION = "eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsInByaW5jaXBhbCI6eyJlbWFpbCI6InRlc3RAbW9ja215aWQuY29tIn0sInB1YmxpYy1rZXkiOnsiZSI6IjY1NTM3IiwibiI6IjIwMzMyNDU5MjEzMjQ1MzI4NzYwMjY5NTMwNzk2OTQyNjI1MzE3MDA2OTMzNDAwODE0MDIyNTQyNTExODMyMjYwMzMzMTYzMjA2ODA4NjcyOTEzMzAxMjU0ODcyMTE0MDQ1NzcxMjE1NDcwMzUyMDkzMDQ2MTM2MzY1NjI5NDExMzg0Njg4Mzk1MDIwMzg4NTUzNzQ0ODg2OTU0ODY5MDMzNjk2MDg5MDk5NzE0MjAwNDUyNjgyNTkwOTE0ODQzOTcxNjgzNDY4NTYyMDE5NzA2MDU5Mzg4MTIxMTc2NDM1MjA0ODE4NzM0MDkxMzYxMDMzNDQ1Njk3OTMzNjgyNzc5MDk1NzEzMzc2OTA5NDEyOTcyMzczNzI3ODUwMjc4Mjk1ODc0MzYxODA2NjMzOTU1MjM2ODYyMTgwNzkyNzg3OTA2NDEzNTM2MzA1MTE3MDMwMDQ1MTY0Mjc2OTU1NDkxNzI1NjQ2NjEwMzY4MTMyMTY3NjU1NTU2MzUzOTc0NTE1NDIzMDQyMjIxMjYxNzMyMDg0MzY4OTc4NTIzNzQ3Nzg5NjU0NDY4OTUzODYwNzcyNzc0MDc4Mzg0NTU2MDI4NzI4ODAwOTAyNDMzNDAxMTMxMjI2OTA0MjQ0NjYxMTYwNzY3OTE2ODgzNjgwNDk1MTIyMjI1MjAyNTQyMDIzODQxNjA2OTk4ODY3NDExMDIyMDg4NDQwOTQ2MzAxMTkxNTAzMzM1OTMyOTYwMjY3MjI4NDcwOTMzNTk5OTc0Nzg3MTUxNDQ5Mjc5NDY1NzAzODQ0NDkzMzUzMTc1MDg4NzE5MDE4MjIxIiwiYWxnb3JpdGhtIjoiUlMifSwiaXNzIjoibW9ja215aWQuY29tIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.FVLlQXJrTjvjAeCbANHk42_W_WqCgODkPD5q_hMfSoSCEMR0ZhdZdn_wnUkYnV9i4oMTKSla4TXYmIXGjvyI1tpaEi7bVcGghr0d2BQ-OonQOrDKVmpnUXYPCjJATGMtJjo-tyObR-p-J7E1ov8i2ZPPjeYZidcCOuWh_kjsMwkUTKVVlAyYjSUaTINylJ258DXso4KO0QRGU9-PP7C1KI_uCX9088ZelL4w3SR1XuOZvHsvWz1aUP9xZDAEQWY1cCyRrUXgGg0-bfzFy2M5DDHXpUuNJf9ST2kZIJl1_MuEU0CIwGe7qSZabbofnzprtiiXF1hTGQU4jB3za8CaeA~eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsImF1ZCI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDgwIiwiaXNzIjoiMTI3LjAuMC4xIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.QShvRa8iZfcuoApnOPZeJc_Mfv5W_ewV16XSrUuCxheMsC25G6ofvXA75wFVIqFuhi7zal_07MVR2aE2Da3BL8jknOOtHSWTKLNbzf1WPpLfVt7_xLEdKY7ZMGSlvB2WhQ5Cc1RxehKXOGmP25OuRBs5oimbpYMiGUFg4igbKSN1Y5AJLyVL_KKaHKfVlNlop8cWAqvvHUbkmYKxp9UFVmz-hCOmbgIlwxHpedBvrTeYzlAxraNngCgiGHIBMMoRpA7PZmw_pHJDJ7jnUA7sqyaxthU-_2FsQyv1y70wUH5pEfCfVGPbxIPW6ZXCPrRpbYYppUnWQkZKn-Dhv_P5wg";
    Assert.assertEquals(EXPECTED_ASSERTION, assertion);
  }

  @Test
  public void testDSAGeneration() throws Exception {
    // This test uses MockMyID DSA data but doesn't rely on this data actually
    // being MockMyID's data.
    final BigInteger MOCKMYID_x = new BigInteger("385cb3509f086e110c5e24bdd395a84b335a09ae", 16);
    final BigInteger MOCKMYID_y = new BigInteger("738ec929b559b604a232a9b55a5295afc368063bb9c20fac4e53a74970a4db7956d48e4c7ed523405f629b4cc83062f13029c4d615bbacb8b97f5e56f0c7ac9bc1d4e23809889fa061425c984061fca1826040c399715ce7ed385c4dd0d402256912451e03452d3c961614eb458f188e3e8d2782916c43dbe2e571251ce38262", 16);
    final BigInteger MOCKMYID_p = new BigInteger("ff600483db6abfc5b45eab78594b3533d550d9f1bf2a992a7a8daa6dc34f8045ad4e6e0c429d334eeeaaefd7e23d4810be00e4cc1492cba325ba81ff2d5a5b305a8d17eb3bf4a06a349d392e00d329744a5179380344e82a18c47933438f891e22aeef812d69c8f75e326cb70ea000c3f776dfdbd604638c2ef717fc26d02e17", 16);
    final BigInteger MOCKMYID_q = new BigInteger("e21e04f911d1ed7991008ecaab3bf775984309c3", 16);
    final BigInteger MOCKMYID_g = new BigInteger("c52a4a0ff3b7e61fdf1867ce84138369a6154f4afa92966e3c827e25cfa6cf508b90e5de419e1337e07a2e9e2a3cd5dea704d175f8ebf6af397d69e110b96afb17c7a03259329e4829b0d03bbc7896b15b4ade53e130858cc34d96269aa89041f409136c7242a38895c9d5bccad4f389af1d7a4bd1398bd072dffa896233397a", 16);

    BigInteger g = new BigInteger("f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a", 16);
    BigInteger q = new BigInteger("9760508f15230bccb292b982a2eb840bf0581cf5", 16);
    BigInteger p = new BigInteger("fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c7", 16);
    BigInteger x = new BigInteger("b137fc5b8faaa53b170563eb03c18b46b657bb6", 16);
    BigInteger y = new BigInteger("ea809be508bc94485553efac8ef2a8debdcdb3545ce433e8bd5889ec9d0880a13b2a8af35451161e58229d1e2be69e74a7251465a394913e8e64b0c33fde39a637b6047d7370178cf4404c0a7b4c2ed31d9cfe03ab79dbcc64667e6e7bc244eb1c127c28d725db94aff29b858bdb636f1307bdf48b3c91f387c2ab588086b6c8", 16);

    long iat = 1380070362995L;
    long dur = 60 * 60 * 1000;
    long exp = iat + dur;

    VerifyingPublicKey mockMyIdPublicKey = DSACryptoImplementation.createPublicKey(MOCKMYID_y, MOCKMYID_p, MOCKMYID_q, MOCKMYID_g);
    SigningPrivateKey mockMyIdPrivateKey = DSACryptoImplementation.createPrivateKey(MOCKMYID_x, MOCKMYID_p, MOCKMYID_q, MOCKMYID_g);
    VerifyingPublicKey publicKeyToSign = DSACryptoImplementation.createPublicKey(y, p, q, g);
    SigningPrivateKey privateKeyToSignWith = DSACryptoImplementation.createPrivateKey(x, p, q, g);

    String certificate = JSONWebTokenUtils.createCertificate(publicKeyToSign, "test@mockmyid.com", "mockmyid.com", iat, exp, mockMyIdPrivateKey);
    String assertion = JSONWebTokenUtils.createAssertion(privateKeyToSignWith, certificate, TEST_AUDIENCE, TEST_ASSERTION_ISSUER, iat, dur);
    String payload = JSONWebTokenUtils.decode(certificate, mockMyIdPublicKey);

    String EXPECTED_PAYLOAD = "{\"exp\":1380073962995,\"principal\":{\"email\":\"test@mockmyid.com\"},\"public-key\":{\"g\":\"f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a\",\"q\":\"9760508f15230bccb292b982a2eb840bf0581cf5\",\"p\":\"fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c7\",\"y\":\"ea809be508bc94485553efac8ef2a8debdcdb3545ce433e8bd5889ec9d0880a13b2a8af35451161e58229d1e2be69e74a7251465a394913e8e64b0c33fde39a637b6047d7370178cf4404c0a7b4c2ed31d9cfe03ab79dbcc64667e6e7bc244eb1c127c28d725db94aff29b858bdb636f1307bdf48b3c91f387c2ab588086b6c8\",\"algorithm\":\"DS\"},\"iss\":\"mockmyid.com\",\"iat\":1380070362995}";

    Assert.assertEquals(EXPECTED_PAYLOAD, payload);

    // Really(!) brittle tests below.  The DSA signature algorithm is not deterministic, so we can't test the actual signature.
    String EXPECTED_CERTIFICATE_PREFIX = "eyJhbGciOiJEUzEyOCJ9.eyJleHAiOjEzODAwNzM5NjI5OTUsInByaW5jaXBhbCI6eyJlbWFpbCI6InRlc3RAbW9ja215aWQuY29tIn0sInB1YmxpYy1rZXkiOnsiZyI6ImY3ZTFhMDg1ZDY5YjNkZGVjYmJjYWI1YzM2Yjg1N2I5Nzk5NGFmYmJmYTNhZWE4MmY5NTc0YzBiM2QwNzgyNjc1MTU5NTc4ZWJhZDQ1OTRmZTY3MTA3MTA4MTgwYjQ0OTE2NzEyM2U4NGMyODE2MTNiN2NmMDkzMjhjYzhhNmUxM2MxNjdhOGI1NDdjOGQyOGUwYTNhZTFlMmJiM2E2NzU5MTZlYTM3ZjBiZmEyMTM1NjJmMWZiNjI3YTAxMjQzYmNjYTRmMWJlYTg1MTkwODlhODgzZGZlMTVhZTU5ZjA2OTI4YjY2NWU4MDdiNTUyNTY0MDE0YzNiZmVjZjQ5MmEiLCJxIjoiOTc2MDUwOGYxNTIzMGJjY2IyOTJiOTgyYTJlYjg0MGJmMDU4MWNmNSIsInAiOiJmZDdmNTM4MTFkNzUxMjI5NTJkZjRhOWMyZWVjZTRlN2Y2MTFiNzUyM2NlZjQ0MDBjMzFlM2Y4MGI2NTEyNjY5NDU1ZDQwMjI1MWZiNTkzZDhkNThmYWJmYzVmNWJhMzBmNmNiOWI1NTZjZDc4MTNiODAxZDM0NmZmMjY2NjBiNzZiOTk1MGE1YTQ5ZjlmZTgwNDdiMTAyMmMyNGZiYmE5ZDdmZWI3YzYxYmY4M2I1N2U3YzZhOGE2MTUwZjA0ZmI4M2Y2ZDNjNTFlYzMwMjM1NTQxMzVhMTY5MTMyZjY3NWYzYWUyYjYxZDcyYWVmZjIyMjAzMTk5ZGQxNDgwMWM3IiwieSI6ImVhODA5YmU1MDhiYzk0NDg1NTUzZWZhYzhlZjJhOGRlYmRjZGIzNTQ1Y2U0MzNlOGJkNTg4OWVjOWQwODgwYTEzYjJhOGFmMzU0NTExNjFlNTgyMjlkMWUyYmU2OWU3NGE3MjUxNDY1YTM5NDkxM2U4ZTY0YjBjMzNmZGUzOWE2MzdiNjA0N2Q3MzcwMTc4Y2Y0NDA0YzBhN2I0YzJlZDMxZDljZmUwM2FiNzlkYmNjNjQ2NjdlNmU3YmMyNDRlYjFjMTI3YzI4ZDcyNWRiOTRhZmYyOWI4NThiZGI2MzZmMTMwN2JkZjQ4YjNjOTFmMzg3YzJhYjU4ODA4NmI2YzgiLCJhbGdvcml0aG0iOiJEUyJ9LCJpc3MiOiJtb2NrbXlpZC5jb20iLCJpYXQiOjEzODAwNzAzNjI5OTV9.";
    Assert.assertTrue(certificate.startsWith(EXPECTED_CERTIFICATE_PREFIX));

    String EXPECTED_ASSERTION_FRAGMENT = "~eyJhbGciOiJEUzEyOCJ9.eyJleHAiOjEzODAwNzM5NjI5OTUsImF1ZCI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDgwIiwiaXNzIjoiMTI3LjAuMC4xIiwiaWF0IjoxMzgwMDcwMzYyOTk1fQ.";
    Assert.assertTrue(assertion.contains(EXPECTED_ASSERTION_FRAGMENT));
  }
}

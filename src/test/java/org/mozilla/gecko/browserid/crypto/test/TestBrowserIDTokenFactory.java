package org.mozilla.gecko.browserid.crypto.test;

import static org.junit.Assert.assertEquals;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.KeySpec;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

import org.junit.Before;
import org.junit.Test;
import org.mozilla.gecko.browserid.crypto.BrowserIDTokenFactory;
import org.mozilla.gecko.jwcrypto.RSACryptoImplementation;

public class TestBrowserIDTokenFactory {
  // These tests use MockMyID data (so that it's easy to verify online) but
  // don't rely on this data being MockMyID. Therefore, we de-couple this test
  // from any MockMyID data elsewhere.
  protected final static String     MOCKMYID_ALGORITHM        = "RS256";
  protected final static BigInteger MOCKMYID_MODULUS          = new BigInteger("15498874758090276039465094105837231567265546373975960480941122651107772824121527483107402353899846252489837024870191707394743196399582959425513904762996756672089693541009892030848825079649783086005554442490232900875792851786203948088457942416978976455297428077460890650409549242124655536986141363719589882160081480785048965686285142002320767066674879737238012064156675899512503143225481933864507793118457805792064445502834162315532113963746801770187685650408560424682654937744713813773896962263709692724630650952159596951348264005004375017610441835956073275708740239518011400991972811669493356682993446554779893834303");
  protected final static BigInteger MOCKMYID_PUBLIC_EXPONENT  = new BigInteger("65537");
  protected final static BigInteger MOCKMYID_PRIVATE_EXPONENT = new BigInteger("6539906961872354450087244036236367269804254381890095841127085551577495913426869112377010004955160417265879626558436936025363204803913318582680951558904318308893730033158178650549970379367915856087364428530828396795995781364659413467784853435450762392157026962694408807947047846891301466649598749901605789115278274397848888140105306063608217776127549926721544215720872305194645129403056801987422794114703255989202755511523434098625000826968430077091984351410839837395828971692109391386427709263149504336916566097901771762648090880994773325283207496645630792248007805177873532441314470502254528486411726581424522838833");

  public static String TEST_ASSERTION_ISSUER = "127.0.0.1";
  public static String TEST_AUDIENCE = "http://localhost:8080";

  protected BrowserIDTokenFactory browserIdTokenFactory;

  @Before
  public void setUp() {
    RSACryptoImplementation rsaCryptoImplementation = new RSACryptoImplementation();
    browserIdTokenFactory = new BrowserIDTokenFactory(MOCKMYID_ALGORITHM, rsaCryptoImplementation, rsaCryptoImplementation);
  }

  @Test
  public void testGeneration() throws Exception {
    // Test that we generate a certificate-and-assertion pair correctly, but
    // without actually submitting it to a live verifier.
    // This test is extremely brittle. Sorry, this is difficult to test
    // end-to-end without hard-coding pretty much everything.

    BigInteger n = new BigInteger("20332459213245328760269530796942625317006933400814022542511832260333163206808672913301254872114045771215470352093046136365629411384688395020388553744886954869033696089099714200452682590914843971683468562019706059388121176435204818734091361033445697933682779095713376909412972373727850278295874361806633955236862180792787906413536305117030045164276955491725646610368132167655556353974515423042221261732084368978523747789654468953860772774078384556028728800902433401131226904244661160767916883680495122225202542023841606998867411022088440946301191503335932960267228470933599974787151449279465703844493353175088719018221");
    BigInteger e = new BigInteger("65537");
    BigInteger d = new BigInteger("9362542596354998418106014928820888151984912891492829581578681873633736656469965533631464203894863562319612803232737938923691416707617473868582415657005943574434271946791143554652502483003923911339605326222297167404896789026986450703532494518628015811567189641735787240372075015553947628033216297520493759267733018808392882741098489889488442349031883643894014316243251108104684754879103107764521172490019661792943030921873284592436328217485953770574054344056638447333651425231219150676837203185544359148474983670261712939626697233692596362322419559401320065488125670905499610998631622562652935873085671353890279911361");

    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
    KeySpec publicKeySpec = new RSAPublicKeySpec(n, e);
    PublicKey publicKeyToSign = keyFactory.generatePublic(publicKeySpec);

    KeySpec privateKeySpec = new RSAPrivateKeySpec(n, d);
    PrivateKey privateKeyToSignWith = keyFactory.generatePrivate(privateKeySpec);

    long iat = 1352995809210L;
    long dur = 60 * 60 * 1000;

    final long exp = iat + dur;

    KeySpec mockMyIdPrivateKeySpec = new RSAPrivateKeySpec(MOCKMYID_MODULUS, MOCKMYID_PRIVATE_EXPONENT);
    PrivateKey mockMyIdPrivateKey = keyFactory.generatePrivate(mockMyIdPrivateKeySpec);

    KeySpec mockMyIdPublicKeySpec = new RSAPublicKeySpec(MOCKMYID_MODULUS, MOCKMYID_PUBLIC_EXPONENT);
    PublicKey mockMyIdPublicKey = keyFactory.generatePublic(mockMyIdPublicKeySpec);

    String certificate = browserIdTokenFactory.createCertificate(publicKeyToSign, "test@mockmyid.com", "mockmyid.com", iat, exp, mockMyIdPrivateKey);
    String assertion = browserIdTokenFactory.createAssertion(privateKeyToSignWith, certificate, TEST_ASSERTION_ISSUER, TEST_AUDIENCE, iat, dur);
    String payload = browserIdTokenFactory.getJWTokenFactory().decode(certificate, mockMyIdPublicKey);

    String EXPECTED_PAYLOAD = "{\"exp\":1352999409210,\"principal\":{\"email\":\"test@mockmyid.com\"},\"public-key\":{\"e\":\"65537\",\"n\":\"20332459213245328760269530796942625317006933400814022542511832260333163206808672913301254872114045771215470352093046136365629411384688395020388553744886954869033696089099714200452682590914843971683468562019706059388121176435204818734091361033445697933682779095713376909412972373727850278295874361806633955236862180792787906413536305117030045164276955491725646610368132167655556353974515423042221261732084368978523747789654468953860772774078384556028728800902433401131226904244661160767916883680495122225202542023841606998867411022088440946301191503335932960267228470933599974787151449279465703844493353175088719018221\",\"algorithm\":\"RS\"},\"iss\":\"mockmyid.com\",\"iat\":1352995809210}";
    assertEquals(EXPECTED_PAYLOAD, payload);

    // To test online, you would do the following (this will fail due to timestamps!):
    // new BlockingBrowserIDVerifierClient().assertVerifySuccess(TEST_AUDIENCE, assertion);

    // Really(!) brittle tests below:
    String EXPECTED_CERTIFICATE = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsInByaW5jaXBhbCI6eyJlbWFpbCI6InRlc3RAbW9ja215aWQuY29tIn0sInB1YmxpYy1rZXkiOnsiZSI6IjY1NTM3IiwibiI6IjIwMzMyNDU5MjEzMjQ1MzI4NzYwMjY5NTMwNzk2OTQyNjI1MzE3MDA2OTMzNDAwODE0MDIyNTQyNTExODMyMjYwMzMzMTYzMjA2ODA4NjcyOTEzMzAxMjU0ODcyMTE0MDQ1NzcxMjE1NDcwMzUyMDkzMDQ2MTM2MzY1NjI5NDExMzg0Njg4Mzk1MDIwMzg4NTUzNzQ0ODg2OTU0ODY5MDMzNjk2MDg5MDk5NzE0MjAwNDUyNjgyNTkwOTE0ODQzOTcxNjgzNDY4NTYyMDE5NzA2MDU5Mzg4MTIxMTc2NDM1MjA0ODE4NzM0MDkxMzYxMDMzNDQ1Njk3OTMzNjgyNzc5MDk1NzEzMzc2OTA5NDEyOTcyMzczNzI3ODUwMjc4Mjk1ODc0MzYxODA2NjMzOTU1MjM2ODYyMTgwNzkyNzg3OTA2NDEzNTM2MzA1MTE3MDMwMDQ1MTY0Mjc2OTU1NDkxNzI1NjQ2NjEwMzY4MTMyMTY3NjU1NTU2MzUzOTc0NTE1NDIzMDQyMjIxMjYxNzMyMDg0MzY4OTc4NTIzNzQ3Nzg5NjU0NDY4OTUzODYwNzcyNzc0MDc4Mzg0NTU2MDI4NzI4ODAwOTAyNDMzNDAxMTMxMjI2OTA0MjQ0NjYxMTYwNzY3OTE2ODgzNjgwNDk1MTIyMjI1MjAyNTQyMDIzODQxNjA2OTk4ODY3NDExMDIyMDg4NDQwOTQ2MzAxMTkxNTAzMzM1OTMyOTYwMjY3MjI4NDcwOTMzNTk5OTc0Nzg3MTUxNDQ5Mjc5NDY1NzAzODQ0NDkzMzUzMTc1MDg4NzE5MDE4MjIxIiwiYWxnb3JpdGhtIjoiUlMifSwiaXNzIjoibW9ja215aWQuY29tIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.HeXFc5e2UkDjqP6TmyclUFQ4WB42BmIcPcEqmRC7Ilo1-SosEy9vIvxCy48Byi84z2NHAyOrDHTYRE-t-ccQFFLvldbLf61uDjtGQtufRsk0g5T1p0BkLPjJJ2HPy7cr9F10MT4q6URnqNXQ5deFSHCU-IzQbNTLAml0x_y3MjLk2mDr2bGfMGtcFUYsxu-QqoL6kUzMk0w1HIdaV2iLNT8qvbujA5LtiTGztdsLrW3LeccDtHFjCl_p0PgvIpCnNW011DNsK-Dch7DysYlvi0n4XqSyNGFt90xOS2O5DFk9yd6_WoIHCwaW5l2Ud9VkMT6auCaQhvSDJ-An2wTqJw";
    assertEquals(EXPECTED_CERTIFICATE, certificate);

    String EXPECTED_ASSERTION = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsInByaW5jaXBhbCI6eyJlbWFpbCI6InRlc3RAbW9ja215aWQuY29tIn0sInB1YmxpYy1rZXkiOnsiZSI6IjY1NTM3IiwibiI6IjIwMzMyNDU5MjEzMjQ1MzI4NzYwMjY5NTMwNzk2OTQyNjI1MzE3MDA2OTMzNDAwODE0MDIyNTQyNTExODMyMjYwMzMzMTYzMjA2ODA4NjcyOTEzMzAxMjU0ODcyMTE0MDQ1NzcxMjE1NDcwMzUyMDkzMDQ2MTM2MzY1NjI5NDExMzg0Njg4Mzk1MDIwMzg4NTUzNzQ0ODg2OTU0ODY5MDMzNjk2MDg5MDk5NzE0MjAwNDUyNjgyNTkwOTE0ODQzOTcxNjgzNDY4NTYyMDE5NzA2MDU5Mzg4MTIxMTc2NDM1MjA0ODE4NzM0MDkxMzYxMDMzNDQ1Njk3OTMzNjgyNzc5MDk1NzEzMzc2OTA5NDEyOTcyMzczNzI3ODUwMjc4Mjk1ODc0MzYxODA2NjMzOTU1MjM2ODYyMTgwNzkyNzg3OTA2NDEzNTM2MzA1MTE3MDMwMDQ1MTY0Mjc2OTU1NDkxNzI1NjQ2NjEwMzY4MTMyMTY3NjU1NTU2MzUzOTc0NTE1NDIzMDQyMjIxMjYxNzMyMDg0MzY4OTc4NTIzNzQ3Nzg5NjU0NDY4OTUzODYwNzcyNzc0MDc4Mzg0NTU2MDI4NzI4ODAwOTAyNDMzNDAxMTMxMjI2OTA0MjQ0NjYxMTYwNzY3OTE2ODgzNjgwNDk1MTIyMjI1MjAyNTQyMDIzODQxNjA2OTk4ODY3NDExMDIyMDg4NDQwOTQ2MzAxMTkxNTAzMzM1OTMyOTYwMjY3MjI4NDcwOTMzNTk5OTc0Nzg3MTUxNDQ5Mjc5NDY1NzAzODQ0NDkzMzUzMTc1MDg4NzE5MDE4MjIxIiwiYWxnb3JpdGhtIjoiUlMifSwiaXNzIjoibW9ja215aWQuY29tIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.HeXFc5e2UkDjqP6TmyclUFQ4WB42BmIcPcEqmRC7Ilo1-SosEy9vIvxCy48Byi84z2NHAyOrDHTYRE-t-ccQFFLvldbLf61uDjtGQtufRsk0g5T1p0BkLPjJJ2HPy7cr9F10MT4q6URnqNXQ5deFSHCU-IzQbNTLAml0x_y3MjLk2mDr2bGfMGtcFUYsxu-QqoL6kUzMk0w1HIdaV2iLNT8qvbujA5LtiTGztdsLrW3LeccDtHFjCl_p0PgvIpCnNW011DNsK-Dch7DysYlvi0n4XqSyNGFt90xOS2O5DFk9yd6_WoIHCwaW5l2Ud9VkMT6auCaQhvSDJ-An2wTqJw~eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzNTI5OTk0MDkyMTAsImF1ZCI6Imh0dHA6XC9cL2xvY2FsaG9zdDo4MDgwIiwiaXNzIjoiMTI3LjAuMC4xIiwiaWF0IjoxMzUyOTk1ODA5MjEwfQ.ij-GznrVQX4c5So79HduPOwEbuETjFjzV4wH9su014UxzyLVQuRzyUMHCh0x83hUSdpwlxhVxC3pb_Qo-7BOgl3uBYJBHiPf2WonRdU_ykB4dPkZcVnfW6814n2WRIMlAD0WDr8nl1Dh4GfhU9j2TvB7K7uTj7SgmVQk6XxNBAfTANPSggarQaUj3cw3C1prFdd4bIRl9bWc41N4V6mg2vw6-hqA1uOuAHUBD254kFOC7KzGUjZdf8L6zqlhq3Ydz1GDvn5xb-bBF3SQDjE16SYMP4GMUyhtVBqkzPCvQ7c__kOB5THqGtKYJPB6UxQUy7BEcO_C5Xmk1FDS_5FPCQ";
    assertEquals(EXPECTED_ASSERTION, assertion);
  }
}
